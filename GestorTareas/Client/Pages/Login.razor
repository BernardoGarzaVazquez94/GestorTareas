@page "/"
@layout Logigigig
@using GestorTareas.Client.Services;
@using GestorTareas.Shared.Models;
@using Radzen.Blazor;
@using Radzen;
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<div Class="rz-p-0 rz-p-md-12">

    <RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
        <RadzenStack AlignItems="AlignItems.Center" Class="rz-mx-auto rz-my-1">

            <RadzenImage Path="https://cdn-icons-png.freepik.com/256/13448/13448334.png?ga=GA1.1.925135359.1718854166" Style="width: 5rem;" AlternateText="url image" />
            <RadzenText TextStyle="TextStyle.H4">Gestor de Tareas</RadzenText>

        </RadzenStack>
        <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            <RadzenStack Gap="1rem" Class="rz-p-sm-12">
                <RadzenFormField Text="Usuario">
                    <ChildContent>
                        <RadzenTextBox Name="Usuario" @bind-Value=@model.FirstName />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="FirstName" Text="El usuario es requerido" />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Contraseña">
                    <ChildContent>
                        <RadzenPassword Name="Contraseña" @bind-Value=@model.LastName />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="LastName" Text="La contraseña es requerida" />
                    </Helper>
                </RadzenFormField>                
                
                <RadzenButton Click=@(args => OnClick(model)) Text="Iniciar sesión" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Click=@(args => OnClickGuardar(model)) Text="Crear cuenta" ButtonStyle="ButtonStyle.Secondary" />
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenCard>
</div>

@code {
    private UsuarioDTO user = new UsuarioDTO();

    string userName = "admin";
    string password = "admin";
    bool rememberMe = true;

    class Model
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

    Model model = new Model();




    async Task OnLogin(string name)
    {
        var token = await AuthService.Login(user);
        // Guarda el token y redirige al usuario
        Navigation.NavigateTo("/fetchdata");
    }

    void OnRegister(string name)
    {
        Navigation.NavigateTo("/register");
    }

    void OnResetPassword(string value, string name)
    {        
    }

    void OnSubmit(Model model)
    {

    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
    }

    async Task OnClick(Model model)
    {

        UsuarioDTO usuarioDTO = new UsuarioDTO();

        usuarioDTO.Username = model.FirstName;
        usuarioDTO.Password = model.LastName;

        var success = await AuthService.Login(usuarioDTO);

        if (success != null)
        {
            Navigation.NavigateTo("/fetchdata");
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "El usuario no existe, favor de crear una cuenta ", Duration = 4000 });
        }
    }

    private void OnClickGuardar(Model model)
    {
        Navigation.NavigateTo("/register");
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
}
