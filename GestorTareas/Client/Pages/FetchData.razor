@page "/fetchdata"
@using GestorTareas.Shared
@using GestorTareas.Shared.Models;
@using Radzen.Blazor
@using Radzen;
@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService


<PageTitle>Tareas</PageTitle>

<h1>Tareas</h1>

@if (tareas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <style>
        .rz-grid-table {
            width: unset;
        }
    </style>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Nueva Tarea" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && tareasParaInsertar.Count() > 0)" />
    </RadzenStack>

    <RadzenDataGrid @ref="tareasGrid" AllowPaging="true" AllowColumnResize="true" AllowSorting="true" EditMode="@editMode"
                    Data="@tareas" TItem="TareasDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn Property="Id" Title="Id tarea" Width="120px" Frozen="true" />
            <RadzenDataGridColumn Property="Titulo" Title="Título">
                <EditTemplate Context="tarea">
                    <RadzenTextBox @bind-Value="tarea.Titulo" Style="width:200px; display: block" Name="Titulo" aria-label="Ingresa el título" />
                    <RadzenRequiredValidator Text="Título es requerido" Component="Titulo" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Descripcion" Title="Descripción">
                <EditTemplate Context="tarea">
                    <RadzenTextBox @bind-Value="tarea.Descripcion" Style="width:200px; display: block" Name="Descripcion" aria-label="Ingresa la descripción" />
                    <RadzenRequiredValidator Text="La descripción es requerida" Component="Descripcion" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="FechaVencimiento" Title="Fecha de vencimiento" Width="200px">
                <Template Context="tarea">
                    @String.Format("{0:d}", tarea.FechaVencimiento)
                </Template>
                <EditTemplate Context="tarea">
                    <RadzenDatePicker @bind-Value="tarea.FechaVencimiento" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Selecciona una fecha de vencimiento" }})" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Context="tarea" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="tarea">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(tarea))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(tarea))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="tarea">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(tarea))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(tarea))" aria-label="Cancel">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(tarea))" aria-label="Delete">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private TareasDTO[]? tareas;
    RadzenDataGrid<TareasDTO> tareasGrid;    
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<TareasDTO> tareasParaInsertar = new List<TareasDTO>();
    List<TareasDTO> tareasParaActualizar = new List<TareasDTO>();

    void Reset()
    {
        tareasParaInsertar.Clear();
        tareasParaActualizar.Clear();
    }

    void Reset(TareasDTO tarea)
    {
        tareasParaInsertar.Remove(tarea);
        tareasParaActualizar.Remove(tarea);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //Se conecta al controller y obtiene la lista para obtener todas las taras y cargalas al grid principal
        tareas = await Http.GetFromJsonAsync<TareasDTO[]>("api/Tareas/obtener-tareas");
    }

    //Metodo que permite habilitar el renglon seleccionado de la tabla
    async Task EditRow(TareasDTO tarea)
    {
        if (editMode == DataGridEditMode.Single && tareasParaInsertar.Count() > 0)
        {
            Reset();
        }
        tareasParaActualizar.Add(tarea);
        await tareasGrid.EditRow(tarea);
    }

    void OnUpdateRow(TareasDTO tarea)
    {
        Reset(tarea);
    }

    async Task SaveRow(TareasDTO tarea)
    {
        HttpResponseMessage response;
        if (tarea.Id != 0)
        {
            int Id = tarea.Id;
            response = await Http.PutAsJsonAsync($"api/Tareas/actualizar-tarea-porId/?id={Id}", tarea);
        }
        else
        {
            response = await Http.PostAsJsonAsync("api/Tareas/agregar-tarea", tarea);
        }

        if (response.IsSuccessStatusCode)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Completado", Detail = "Acción realizada correctamente", Duration = 4000 });

            if (tarea.Id == 0)
            {
                var tareaCreada = await response.Content.ReadFromJsonAsync<TareasDTO>();
                if (tareaCreada != null)
                {
                    tareas = tareas.Append(tareaCreada).ToArray();
                }
            }
            else
            {
                var tareaActualizada = await response.Content.ReadFromJsonAsync<TareasDTO>();
                if (tareaActualizada != null)
                {
                    var index = Array.FindIndex(tareas, t => t.Id == tareaActualizada.Id);
                    if (index >= 0)
                    {
                        tareas[index] = tareaActualizada;
                    }
                }
            }

            Reset(); // Asegúrate de limpiar la lista después de guardar
            await tareasGrid.Reload();
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Error en agregar la tarea", Duration = 4000 });
            Console.Error.WriteLine("Error al guardar la tarea: " + response.ReasonPhrase);
        }
    }

    void CancelEdit(TareasDTO tarea)
    {
        Reset(tarea);
        tareasGrid.CancelEditRow(tarea);
    }

    async Task DeleteRow(TareasDTO tarea)
    {
        Reset(tarea);

        if (tarea.Id != 0)
        {
            int Id = tarea.Id;
            var response = await Http.DeleteAsync($"api/Tareas/eliminar-tarea-porId/?id={Id}");

            if (response.IsSuccessStatusCode)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Completado", Detail = "Acción realizada correctamente", Duration = 4000 });

                tareas = tareas.Where(t => t.Id != Id).ToArray();
                await tareasGrid.Reload();
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Error en borrar tarea", Duration = 4000 });
                Console.Error.WriteLine("Error al guardar la tarea: " + response.ReasonPhrase);
            }
        }
        else
        {
            var tareasParaBorrar = tareasParaInsertar.FirstOrDefault(o => o.Equals(tarea));
            if (tareasParaBorrar != null)
            {
                tareasParaInsertar.Remove(tareasParaBorrar);
            }
        }

        await tareasGrid.Reload();
    }

    async Task InsertRow()
    {
        // var tarea = new TareasDTO();
        // tareasParaInsertar.Add(tarea);
        // await tareasGrid.InsertRow(tarea);

        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Error en agregar la tarea", Duration = 4000 });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    async Task OnCreateRow(TareasDTO tarea)
    {
        tareasParaInsertar.Remove(tarea);

        HttpResponseMessage response;
        if (tarea.Id != 0)
        {
            int Id = tarea.Id;
            response = await Http.PutAsJsonAsync($"api/Tareas/actualizar-tarea-porId/?id={Id}", tarea);
        }
        else
        {
            response = await Http.PostAsJsonAsync("api/Tareas/agregar-tarea", tarea);
        }

        if (response.IsSuccessStatusCode)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Completado", Detail = "Acción realizada correctamente", Duration = 4000 });

            if (tarea.Id == 0)
            {
                var tareaCreada = await response.Content.ReadFromJsonAsync<TareasDTO>();
                if (tareaCreada != null)
                {
                    tareas = tareas.Append(tareaCreada).ToArray();
                }
            }
            else
            {
                var tareaActualizada = await response.Content.ReadFromJsonAsync<TareasDTO>();
                if (tareaActualizada != null)
                {
                    var index = Array.FindIndex(tareas, t => t.Id == tareaActualizada.Id);
                    if (index >= 0)
                    {
                        tareas[index] = tareaActualizada;
                    }
                }
            }

            Reset(); // Asegúrate de limpiar la lista después de crear
            await tareasGrid.Reload();
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Error en agregar la tarea", Duration = 4000 });
            Console.Error.WriteLine("Error al guardar la tarea: " + response.ReasonPhrase);
        }
    }
}
